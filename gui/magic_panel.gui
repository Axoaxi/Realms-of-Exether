# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width_minus_20 = 520
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

template magic_panel_visibility {
	visible = "[GetVariableSystem.Exists('show_magic')]"
}

types magic_panel
{
	type magic_panel = default_block_window {
		name = "magic_panel"
		using = magic_panel_visibility

		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/companies"
				}
			}
		
			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/companies_stop"
				}
			}
		}

		blockoverride "header_close_button" {
			onclick = "[GetVariableSystem.Toggle('show_magic')]"
		}

		blockoverride "entire_back_button" {
			back_button_large = {
				position = { 8 30 }
				onclick = "[GetVariableSystem.Toggle('show_magic')]"
				visible = "[GetVariableSystem.Exists('show_magic')]"
				input_action = "back"
			}

			back_button_large = {
				position = { 8 30 }
				onclick = "[GetVariableSystem.Toggle('show_magic')]"
				visible = "[Not(GetVariableSystem.Exists('show_magic'))]"
				input_action = "back"
			}
		}
		
		blockoverride "window_header_name" {
			raw_text = "MAGIC_PANEL_HEADER"
		}

		#TOP
		blockoverride "fixed_top"
		{
			### TOP PART
			top_illu = {
				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_budget.dds"
				}
				textbox = {
					name = "tutorial_highlight_magic_reserves"
					parentanchor = center
					using = fontsize_mega
					raw_text = "@magic![AccessPlayer.MakeScope.ScriptValue('magic_reserves_total')|=+D]"
					autoresize = yes
					align = center|nobaseline
					tooltip = "MAGIC_TOOLTIP"
				}
			}
			
			widget = { size = { 1 10 }}
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				using = default_list_position
				direction = vertical
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				datacontext = "[AccessPlayer]"

				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('hide_current_companies'))]"
					parentanchor = hcenter
					direction = vertical
					default_header_2texts = {
						blockoverride "text1" {
							text = "MAGICAL_RITUALS"
						}
					}

					flowcontainer = {
						direction = vertical
						parentanchor = hcenter
						margin = { 0 10 }
						spacing = 10

						### COMPANIES
						flowcontainer = {
							parentanchor = hcenter
							visible = "[Not(IsDataModelEmpty(AccessPlayer.GetCompanies))]"
							minimumsize = { @panel_width -1 }
							maximumsize = { @panel_width -1 }
							datamodel = "[GetGlobalList('ritual_id_list')]"
							direction = vertical
							spacing = 10

							item = {
								ritual_item = {}
							}
						}


					}
				}
				
				section_header_button = {
					visible = "[Not(IsDataModelEmpty(GetGlobalList('ritual_id_list')))]"
						
					blockoverride "left_text" {
						text = "ACTIVE_RITUALS"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(GetGlobalList('ritual_id_list'))]"
						}
					}

					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('active_spells')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[GetVariableSystem.Exists('active_spells')]"
					}

					blockoverride "onclick_showless" {
						visible = "[Not(GetVariableSystem.Exists('active_spells'))]"
					}
				}

				### ACTIVE RITUALS
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[Not(GetVariableSystem.Exists('active_spells'))]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(GetGlobalList('ritual_id_list')))]"
						datamodel = "[GetGlobalList('ritual_id_list')]"
						direction = vertical
						spacing = 5

						item = {
							potential_ritual_item = {}
						}
					}
				}

				# ATTAINABLE COMPANIES
				section_header_button = {
					blockoverride "left_text" {
						text = "AVAILABLE_RITUALS"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.GetAttainableCompanies)]"
						}
					}
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('potential_rituals')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('potential_rituals'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('potential_rituals')]"
					}
				}

				### ATTAINABLE COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[GetVariableSystem.Exists('potential_rituals')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(GetGlobalList('ritual_id_list')))]"
						datamodel = "[GetGlobalList('ritual_id_list')]"
						direction = vertical
						spacing = 5

						item = {
							potential_ritual_item = {}
						}
					}
				}		

				# POTENTIAL COMPANIES
				section_header_button = {
					blockoverride "left_text" {
						text = "ATTAINABLE_RITUALS"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.GetPotentialCompanies)]"
						}
					}
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('unavailable_rituals')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('unavailable_rituals'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('unavailable_rituals')]"
					}
				}

				### POTENTIAL COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[GetVariableSystem.Exists('unavailable_rituals')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.GetPotentialCompanies))]"
						datamodel = "[GetGlobalList('ritual_id_list')]"
						direction = vertical
						spacing = 5

						item = {
							potential_ritual_item = {}
						}
					}
				}			
			}
		}
	}

	type ritual_item = container {

		flowcontainer = {
			direction = vertical
			minimumsize = { @panel_width -1 }		
			maximumsize = { @panel_width -1 }
			margin = { 10 10 }
			spacing = 5		
			margin_top = 3
			
			background = {
					using = simple_frame
			}

			tooltipwidget = {
				FancyTooltip_Company = {}
			}

			container = {
				minimumsize = { 536 -1 }
				parentanchor = hcenter

				flowcontainer = {
					minimumsize = { @panel_width_minus_10 -1 }
					parentanchor = vcenter
					spacing = 5
					margin_left = 10

					background = {
						using = fade_right_simple
					}

					flowcontainer = {
						direction = vertical
						margin_top = 2
						margin_bottom = 2

						textbox = {
							minimumsize = { 450 -1 }
							maximumsize = { 450 -1 }
							autoresize = yes
							multiline = no
							fontsize_min = 12
							elide = right
							text = "[Company.GetName]"
							default_format = "#header"
							using = fontsize_large
							using = ritual_item_text
						}

						textbox = {
							minimumsize = { 450 -1 }
							maximumsize = { 450 -1 }
							autoresize = yes
							multiline = no
							fontsize_min = 12
							elide = right
							text = "COMPANY_ESTABLISHED"
							using = ritual_item_text
						}
					}
				}	

				flowcontainer = {
					parentanchor = right|vcenter
					spacing = 5
					margin_right = 10
					button_icon_pin = {
						size = { 26 26 }
						visible = "[Company.IsPinnedInOutliner]"
						onclick = "[Company.TogglePinInOutliner]"
						tooltip = "UNPIN_COMPANY"
					}

					button_icon_unpin = {
						size = { 26 26 }
						visible = "[Not(Company.IsPinnedInOutliner)]"
						onclick = "[Company.TogglePinInOutliner]"
						tooltip = "PIN_COMPANY"
					}
					
					button_icon_edit = {
						size = { 26 26 }
						onclick = "[PopupManager.ShowCompanyChangeName(Company.Self)]"
						tooltip = "CHANGE_NAME"
					}
				}
			}

			flowcontainer = {
				spacing = 10

				flowcontainer = {
					direction = vertical
					parentanchor = vcenter
					spacing = 5

					datacontext = "[Company.GetCompanyType]"

					icon = {
						size = { 130 130 }
						texture = "[CompanyType.GetIcon]"
					}

					button = {
						using = default_button
						size = { 130 40 }
						text = "DISBAND_COMPANY"
						onclick = "[Execute(GetPlayer.RemoveCompany(CompanyType.Self))]"
						enabled = "[IsValid(GetPlayer.RemoveCompany(CompanyType.Self))]"
						tooltip = "REMOVE_COMPANY_DESC"
					}
				}

				flowcontainer = {
					direction = vertical
					parentanchor = vcenter
					minimumsize = { 380 -1 }
					maximumsize = { 380 -1 }
					margin = { 10 10 }
					spacing = 8

					background = {
						texture = "[Company.AccessCompanyType.GetBackground]"
					}	

					background = {
						using = entry_bg_simple
					}
				
					flowcontainer = {
						direction = horizontal
						spacing = 5						
						datamodel = "[Company.AccessCompanyType.AccessBuildingTypes]"
						
						item = {
							company_building_item = { 
								blockoverride "icon_size" {
									size = { 40 40 }
								}
							}
						}
					}		

					textbox = {
						text = "COMPANY_PROSPERITY_MODIFIER_HEADER"
						using = ritual_item_text
					}

					widget = {		
						size = { 190 28 }
						tooltip = "COMPANY_PROSPERITY_TOOLTIP"
						
						changed_value_increased_progressbar_horizontal = {
							size = { 100% 100% }
							visible = "[And(GreaterThan_CFixedPoint(Company.CalcProsperityChange,'(CFixedPoint)0'), LessThan_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"
							blockoverride "values" {
								min = 0
								max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
								value = "[Company.GetProsperity]"
							}
							blockoverride "animate_negative_change" {
								animate_negative_changes = no
							}
							blockoverride "arrow_texture_density" {
								texture_density = 4 #use to match height of progressbar
							}
						}

						changed_value_decreased_progressbar_horizontal = {
							size = { 100% 100% }
							visible = "[And(LessThan_CFixedPoint(Company.CalcProsperityChange,'(CFixedPoint)0'), LessThan_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"

							blockoverride "values" {
								min = 0
								max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
								value = "[Company.GetProsperity]"
							}
							blockoverride "arrow_texture_density" {
								texture_density = 4 #use to match height of progressbar
							}
						}

						default_progressbar_horizontal = {
							size = { 100% 100% }
							visible = "[Or(EqualTo_CFixedPoint(Company.CalcProsperityChange,'(CFixedPoint)0'), GreaterThanOrEqualTo_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"

							blockoverride "values" {
								min = 0
								max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
								value = "[Company.GetProsperity]"
							}
						}

						textbox = {				
							text = "COMPANY_PROSPERITY"
							using = ritual_item_text
							parentanchor = vcenter
							margin_left = 10
						}
					}


					textbox = {				
						text = "COMPANY_PRODUCTIVITY"
						using = ritual_item_text
					}			
			
					
					textbox = {
						text = "COMPANY_PROSPERITY_MODIFIER"
						alpha = "[TransparentIfFalse(Company.ProvidesProsperityBonus)]"
						using = ritual_item_text
					}
				}
			}
			
		}		
	}
	
	type potential_ritual_item = flowcontainer {
		direction = vertical
		minimumsize = { @panel_width -1 }		
		maximumsize = { @panel_width -1 }
		margin = { 10 10 }
		margin_top = 3
		spacing = 5		
			
		background = {
			using = simple_frame
		}

		tooltipwidget = {
			FancyTooltip_CompanyType = {
				datacontext = "[GetPlayer]"
			}
		}

		container = {
			minimumsize = { 536 -1 }
			parentanchor = hcenter

			flowcontainer = {
				minimumsize = { 536 -1 }
				parentanchor = vcenter
				spacing = 5
				margin_left = 10
				margin_top = 2
				margin_bottom = 2

				background = {
					using = fade_right_simple
				}

				textbox = {
					text = "RITUAL_NAME"
					default_format = "#header"
					autoresize = yes
					multiline = no
					using = fontsize_large
					using = ritual_item_text
					margin_bottom = 5
				}	
			}	
		}

		flowcontainer = {
			spacing = 10

			# COMPANY LOGO
			flowcontainer = {
				direction = vertical
				parentanchor = vcenter
				icon = {
					size = { 130 130 }
					visible =  "[EqualTo_CFixedPoint(Scope.GetValue, '(CFixedPoint)1')]"
					texture = "gfx/interface/icons/company_icons/basic_agriculture_1.dds"
				}
				icon = {
					visible =  "[EqualTo_CFixedPoint(Scope.GetValue, '(CFixedPoint)2')]"
					size = { 130 130 }
					texture = "gfx/interface/icons/company_icons/basic_agriculture_2.dds"
				}
                button = {
					#using = default_button_primary_action pretty button
                    using = default_button
                    size = { 130 40 }
                    text = "CAST_RITUAL"
                    datacontext = "[GetScriptedGui('cast_ritual_button_effect')]"
                    onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(AccessPlayer.MakeScope).AddScope('ritual_id', MakeScopeValue(Scope.GetValue)).End)]"
                    enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(AccessPlayer.MakeScope).AddScope('ritual_id', MakeScopeValue(Scope.GetValue)).End)]"
                    tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(AccessPlayer.MakeScope).AddScope('ritual_id', MakeScopeValue(Scope.GetValue)).End)]"
                }
			}

			# COMPANY DETAILS
			flowcontainer = {
				direction = vertical
				parentanchor = vcenter
				minimumsize = { 380 -1 }
				maximumsize = { 380 -1 }
				margin = { 10 10 }
				spacing = 4

				background = {
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_farm_rice.dds"
				}

				background = {
					visible =  "[And(GreaterThan_int32(FixedPointToInt(Scope.GetValue), '(int32)0'), LessThanOrEqualTo_int32(FixedPointToInt(Scope.GetValue), '(int32)5'))]"
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_farm_rye.dds"
				}

				background = {
					visible =  "[And(GreaterThan_int32(FixedPointToInt(Scope.GetValue), '(int32)5'), LessThanOrEqualTo_int32(FixedPointToInt(Scope.GetValue), '(int32)10'))]"
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_farm_corn.dds"
				}

				background = {
					visible =  "[And(GreaterThan_int32(FixedPointToInt(Scope.GetValue), '(int32)10'), LessThanOrEqualTo_int32(FixedPointToInt(Scope.GetValue), '(int32)15'))]"
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_manufacturing_light.dds"
				}

				background = {
					visible =  "[And(GreaterThan_int32(FixedPointToInt(Scope.GetValue), '(int32)15'), LessThanOrEqualTo_int32(FixedPointToInt(Scope.GetValue), '(int32)20'))]"
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_plantation.dds"
				}

				background = {
					visible =  "[And(GreaterThan_int32(FixedPointToInt(Scope.GetValue), '(int32)20'), LessThanOrEqualTo_int32(FixedPointToInt(Scope.GetValue), '(int32)25'))]"
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_mining.dds"
				}

				background = {
					visible =  "[And(GreaterThan_int32(FixedPointToInt(Scope.GetValue), '(int32)25'), LessThanOrEqualTo_int32(FixedPointToInt(Scope.GetValue), '(int32)30'))]"
					texture = "gfx/interface/icons/company_icons/company_backgrounds/comp_illu_manufacturing_heavy.dds"
				}
			
				background = {
					using = entry_bg_simple
				}

				textbox = {				
					text = "Test"
					tooltip = "COMPANY_TYPE_PRODUCTIVITY_TOOLTIP"
					using = ritual_item_text
					margin_top = 5
				}	

				textbox = {				
					text = "Test"
					tooltip = "COMPANY_TYPE_PRODUCTIVITY_TOOLTIP"
					using = ritual_item_text
					margin_top = 5
				}	

				textbox = {				
					text = "Test"
					tooltip = "COMPANY_TYPE_PRODUCTIVITY_TOOLTIP"
					using = ritual_item_text
					margin_top = 5
				}	

				widget = { size = { 5 5 } }

				textbox = {
					text = "RITUAL_DURATION"
					using = ritual_item_text
				}			
				
				textbox = {
					fontsize_min = 12
					autoresize = yes
					multiline = no
					elide = right
					text = "RITUAL_COST"
					using = ritual_item_text
				}	
			}		
		}		
	}

	type company_building_item = button {
		texture = "[BuildingType.GetTexture]"
		onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
		effectname = "NoHighlight"
		distribute_visual_state = no
		inherit_visual_state = no
		alpha = "[TransparentIfZero_int32(BuildingType.GetLevelCountInCountry(GetPlayer.Self))]"

		block "icon_size" {
			size = { 50 50 }	
		}

		textbox = {
			text = "BUILDING_TYPE_COUNT"
			autoresize = yes
			position = { 5 -2 }
			parentanchor = bottom
			align = right|nobaseline
			visible = "[NotEqualTo_int32( BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0')]"
		}

		tooltipwidget = {
			FancyTooltip_BuildingType = {}
		}
	}	
}

template ritual_item_text {
	align = nobaseline
	autoresize = yes
	maximumsize = { 350 -1 }
	multiline = yes
}

template companies_header_texts {
	minimumsize = { @panel_width_plus_14 -1 }
	maximumsize = { @panel_width_plus_14 -1 }
	autoresize = yes
	multiline = yes
	align = hcenter|nobaseline
	parentanchor = hcenter
}
